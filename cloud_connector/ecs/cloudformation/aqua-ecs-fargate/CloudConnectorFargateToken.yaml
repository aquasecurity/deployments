AWSTemplateFormatVersion: 2010-09-09
Description: >-
  This AWS CloudFormation template installs the Aqua Cloud Connector components
  in ECS FARGATE .
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
      - Label:
          default: ECS Infrastructure Configuration
        Parameters:
          - VpcId
          - VpcCidr
          - EcsInstanceSubnets
      - Label:
          default: Aqua Security Configuration
        Parameters:
          - AquaGatewayUrl
          - AquaCCImage
          - AquaCloudConnectorToken
    ParameterLabels:
      VpcId:
        default: VPC ID
      VpcCidr:
        default: VPC CIDR
      EcsInstanceSubnets:
        default: ECS Instance Subnets
      AquaGatewayUrl:
        default: Aqua gateway url
      ClusterName:
        default: Name of ecs cluster
      AquaCloudConnectorToken:
        default: Aqua Cloud Connector Token
Parameters:
  AquaCCImage:
    Type: String
    Description: Enter cloud connector image path on ECR
  VpcId:
    Description: VpcId to deploy into
    Type: 'AWS::EC2::VPC::Id'
  VpcCidr:
    Description: 'For use by load balancer service polling. Enter VPC CIDR. Ex: 10.0.0.0/16'
    Type: String
  EcsInstanceSubnets:
    Type: 'List<AWS::EC2::Subnet::Id>'
    Description: Select all the subnets ECS utilizes
  ClusterName:
    Description: Name of the existing ecs cluster
    Type: String
    MinLength: '5'
    MaxLength: '25'
    AllowedPattern: '[a-zA-Z0-9-]*'
  AquaGatewayUrl:
    Type: String
    Description: Enter Aqua Gateway Url
  AquaCloudConnectorToken:
    Type: String
    Description: Enter Aqua Cloud Connector Authentication Token
Resources:
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allowLambdaLogging
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:*"
                Resource: "*"
  RandomStringLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Handler: index.lambda_handler
      Timeout: 10
      Role: !GetAtt "LambdaExecutionRole.Arn"
      Runtime: python3.9
      Code:
        ZipFile: |
          import cfnresponse
          from random import choice
          from string import ascii_lowercase, digits
          def random_string(length=8, chars=ascii_lowercase + digits):
            return "".join(choice(chars) for x in range(length))
          def lambda_handler(event, context):
            print(f"Data in event: {event}")
            response_data = {}
            if event["RequestType"] == "Create":
              string_length = int(event["ResourceProperties"]["Length"])
              physicalResourceId = random_string(string_length)
              response_data = { "RandomString": physicalResourceId }
            
            else: # if event["RequestType"] == "Update" or event["RequestType"] == "Delete":
              physicalResourceId = event["PhysicalResourceId"]
            cfnresponse.send(event, context, cfnresponse.SUCCESS, response_data, physicalResourceId)
  RandomString:
   Type: AWS::CloudFormation::CustomResource
   Properties:
     Length: 5
     ServiceToken: !GetAtt RandomStringLambdaFunction.Arn      
  AquaCCTaskDefinition:
    Type: 'AWS::ECS::TaskDefinition'
    DependsOn:
      - AquaEcsTaskRole
    Properties:
      Family: !Join ["-", ["aqua-cc", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
      RequiresCompatibilities:
        - FARGATE
      Cpu: '2048'
      Memory: '4096'
      NetworkMode: awsvpc
      ExecutionRoleArn: !Ref AquaEcsTaskRole
      Volumes:
        - Name: config
          Host: {}      
      ContainerDefinitions:
        - Name: !Join ["-", ["aqua-cc", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
          Image: !Ref AquaCCImage
          Ulimits:
            - Name: nofile
              SoftLimit: '1048576'
              HardLimit: '1048576'
          PortMappings:
            - ContainerPort: '8080'
              HostPort: '8080'
              Protocol: tcp
            - ContainerPort: '8443'
              HostPort: '8443'
              Protocol: tcp
          Essential: 'true'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Join ['-', ['/aqua/cc', !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
              awslogs-region: !Ref "AWS::Region"
              awslogs-stream-prefix: aquaCloudConnector
          Secrets:
            - Name: AQUA_CLOUD_CONNECTOR_TOKEN
              ValueFrom: !Ref SecretToken
          Environment:
            - Name: AQUA_SERVER
              Value: !Join [':', [!Ref AquaGatewayUrl, "443"]]
            - Name: AQUA_CLOUD_CONNECTOR_CONFIG_FILE_PATH
              Value: /etc/config/connector.yaml                
            - Name: AQUA_CLOUD_CONNECTOR_HEALTH_PORT
              Value: "8080"
            - Name: AQUA_TLS_VERIFY
              Value: 0
          MountPoints:
            - ContainerPath: /etc/config
              SourceVolume: config
        - Name: !Join ["-", ["sidecar-cc", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
          Image: bash
          Essential: false
          Command:
            - -c
            - echo $DATA | base64 -d - | tee /etc/config/connector.yaml
          Environment:
            - Name: DATA
              Value:
                Fn::Base64: |
                  tunnels: 
                    # Azure Container Registry 
                    #- host: <account>.azurecr.io  
                    # Google Container Registry 
                    #- host: gke.gcr.io 
                    # JFrog Container Registry 
                    #- host: <account>.jfrog.io 
                    # On-premises private registry with static IP address 
                    #- host: 20.101.1.253:443 
                    # Amazon Container Registry 
                    # This is a special case which creates four different URIs for ECR 
                    # You should only provide the region 
                    #- service: 
                    #   type: ecr 
                    #     region: eu-west-2
          MountPoints:
            - ContainerPath: /etc/config
              SourceVolume: config                                                   
      TaskRoleArn: !Ref AquaEcsTaskRole
  AquaCCService:
    Type: 'AWS::ECS::Service'
    DependsOn:
      - AquaCCTaskDefinition
    Properties:
      Cluster: !Ref ClusterName
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - !Ref AquaFargateSecurityGroup
          Subnets: !Ref EcsInstanceSubnets
      ServiceName: !Join ["-", ["aqua-cc", !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
      DesiredCount: '1'
      DeploymentConfiguration:
        MaximumPercent: '200'
        MinimumHealthyPercent: '100'
      TaskDefinition: !Ref AquaCCTaskDefinition      
  AquaFargateSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Allow lb access to fargate tasks
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3622
          ToPort: 3622
          CidrIp: !Ref VpcCidr
        - IpProtocol: tcp
          FromPort: 8443
          ToPort: 8443
          CidrIp: !Ref VpcCidr
        - IpProtocol: tcp
          FromPort: 8444
          ToPort: 8444
          CidrIp: !Ref VpcCidr
        - IpProtocol: tcp
          FromPort: 8099
          ToPort: 8099
          CidrIp: !Ref VpcCidr
  AquaEcsTaskRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Join ["-", ["AquaEcsTaskRole", !GetAtt RandomString.RandomString]]
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: !Join ["-", ["AquaCCPolicy", !GetAtt RandomString.RandomString]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:DescribeImages'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:DescribeRepositories'
                  - 'ecr:ListImages'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:GetRepositoryPolicy'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogGroup'
                  - 'logs:PutLogEvents'
                  - 'logs:CreateLogDelivery'
                  - 'logs:CreateLogStream'
                  - 'logs:TagLogGroup'
                  - 'secretsmanager:*'
                Resource: '*'
              - !Ref 'AWS::NoValue'
        - PolicyName: !Join ["-", ["KMSPermisions", !GetAtt RandomString.RandomString]]
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 'kms:Decrypt'
                  - 'kms:Encrypt'
                Resource: '*'
  AquaCCLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Join ['-', ['/aqua/cc', !Join ["-", ["td", !GetAtt RandomString.RandomString]]]]
      RetentionInDays: 30
  SecretToken:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Aqua Cloud Connector Authentication Token Secret
      Name: !Join ["/", ["AquaCloudConnectorToken", !GetAtt RandomString.RandomString]]
      SecretString: 
          !Ref AquaCloudConnectorToken
Outputs:
  AquaGatewayUrl:
    Description: >-
      Aqua gateway Url
    Value: !Join [":", [!Ref AquaGatewayUrl, "443"]]
  AquaEcsTaskRole:
    Description: IAM role assigned to access ECR
    Value: !Ref AquaEcsTaskRole